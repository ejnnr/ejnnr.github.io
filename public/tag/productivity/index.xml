<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Productivity | Erik Jenner</title>
    <link>https://ejenner.com/tag/productivity/</link>
      <atom:link href="https://ejenner.com/tag/productivity/index.xml" rel="self" type="application/rss+xml" />
    <description>Productivity</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 14 Apr 2021 19:42:00 +0200</lastBuildDate>
    <image>
      <url>https://ejenner.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Productivity</title>
      <link>https://ejenner.com/tag/productivity/</link>
    </image>
    
    <item>
      <title>Scripting for personal productivity</title>
      <link>https://ejenner.com/post/automation-productivity/</link>
      <pubDate>Wed, 14 Apr 2021 19:42:00 +0200</pubDate>
      <guid>https://ejenner.com/post/automation-productivity/</guid>
      <description>&lt;p&gt;This is just a short PSA: if you can code, you can write small scripts
to support your habits and productivity routines. I&amp;rsquo;m not talking about
automating long, tedious tasks. Rather, I mean automating tasks that
take about five or ten seconds but that you do every day, or at least
very often.&lt;/p&gt;
&lt;p&gt;The point is not actually that you&amp;rsquo;ll save five seconds. Instead, such scripts
can give you the right nudges at the right time, make your life slightly less
annoying, or automate stuff so you can&amp;rsquo;t accidentially forget doing it.
The philosophy is that &lt;a href=&#34;https://www.lesswrong.com/posts/reitXJgJXFzKpdKyd/beware-trivial-inconveniences&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;even very small inconveniences matter&lt;/a&gt;, and if you can
spend a few minutes to make every day that follows even a tiny bit more convenient,
it&amp;rsquo;s probably worth doing.&lt;/p&gt;
&lt;p&gt;This is best illustrated by some examples, so that&amp;rsquo;s what the rest of this
post consists of. But I&amp;rsquo;m sure this is only scratching the surface, so take
these as inspiration and not as a comprehensive list of possibilities.&lt;/p&gt;
&lt;h2 id=&#34;checklists&#34;&gt;Checklists&lt;/h2&gt;
&lt;p&gt;One of my most important routines is a &amp;ldquo;daily checklist&amp;rdquo; that I go through
at the end of each day, where I reflect a bit but mainly plan the next day.
I used to just have a list of all the steps in a text file and went through
those, but as the checklist grew, this became ever so slightly annoying,
and I was liable to skip steps sometimes. So I wrote a small script (inside
Emacs), which takes me through the checklist. I press a keyboard shortcut
to start the checklist and I&amp;rsquo;m prompted with the first item, then I press the
same shortcut again and I&amp;rsquo;m prompted with the next item and so on. For me,
this alone is already an improvement over a list in a textfile, because
I&amp;rsquo;m less likely to press the shortcut without actually doing the current item
than I was to just skip to the next one when reading a checklist. But even
better, for many items my script can give me additional nudges to make
the checklist less annoying. For example, I have several items where I look
at my weekly goals, my scheduled TODO items for the next day etc. Instead
of opening the right files by hand, the script does that automatically once
the corresponding prompt comes up. It doesn&amp;rsquo;t sound like much, but it adds
up and makes going through the checklist much less annoying, which means
I&amp;rsquo;m more likely to do it diligently. Using a script for this checklist
has other advantages, which I&amp;rsquo;ll talk about below.&lt;/p&gt;
&lt;p&gt;Of course, this is not specific about a daily checklist you go through
every evening, it applies to any checklist you use regularly and which
has a reasonably large nummber of items.&lt;/p&gt;
&lt;h2 id=&#34;automatically-close-distracting-programs&#34;&gt;Automatically close distracting programs&lt;/h2&gt;
&lt;p&gt;Cal Newport recommends ending the work day with a &lt;a href=&#34;https://www.calnewport.com/blog/2009/06/08/drastically-reduce-stress-with-a-work-shutdown-ritual/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shutdown ritual&lt;/a&gt; and
truly relaxing afterwards. This doesn&amp;rsquo;t really work if you still have
programs such as Slack open that distract you with work-related notifications,
so my daily checklist script closes distracting programs automatically
at the end of the checklist.&lt;/p&gt;
&lt;p&gt;One thing I haven&amp;rsquo;t yet looked into but that would be nice is to also close
individual browser tabs automatically. For example, you could close
distracting websites whenever you suspend your PC, or
whenever they were idle for a specific time, or when you start
a Pomodoro, etc. A website blocker can of course serve a similar function,
but unless you &lt;em&gt;always&lt;/em&gt; block those website, the slight nudge from closing
tabs automatically could be useful on top of a blocker.&lt;/p&gt;
&lt;h2 id=&#34;welcome-screen&#34;&gt;Welcome screen&lt;/h2&gt;
&lt;p&gt;When I start my computer in the morning, I&amp;rsquo;m greeted by a fullscreen wallpaper,
with a nice quote and my top priority for the day. For example, it might look
like this&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/automation-productivity/welcome_hu8a94cbf0080c5f16755e543a89648003_2648525_795dfba100f47daa6e1bca0062b92a2d.png 400w,
               /post/automation-productivity/welcome_hu8a94cbf0080c5f16755e543a89648003_2648525_079a6e2e961641636483d1f6cb735677.png 760w,
               /post/automation-productivity/welcome_hu8a94cbf0080c5f16755e543a89648003_2648525_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://ejenner.com/post/automation-productivity/welcome_hu8a94cbf0080c5f16755e543a89648003_2648525_795dfba100f47daa6e1bca0062b92a2d.png&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

The top priority is another thing where my daily checklist script comes
in handy: it prompts me to enter one for the next day and stores it; the welcome
screen can then later read it from disk and display it.&lt;/p&gt;
&lt;h2 id=&#34;use-apis-for-the-apps-you-use&#34;&gt;Use APIs for the apps you use&lt;/h2&gt;
&lt;p&gt;This is of course very specific to the apps you use, but I&amp;rsquo;ll give an example.
I use &lt;a href=&#34;https://complice.co/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Complice&lt;/a&gt; to plan my day and &lt;a href=&#34;https://www.beeminder.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Beeminder&lt;/a&gt; for accountability for my goals.
Yet another thing my daily checklist script does is to fetch all goals from
Beeminder for which some progress is due the next day, using the Beeminder API.
It then adds corresponding TODOs to Complice, using the Complice API. So before
I add TODOs manually, the list on Complice is already pre-populated with
what I need to do to stay on track with my Beeminder goals.&lt;/p&gt;
&lt;p&gt;Of course this is only possible when the services you want to automate stuff
for expose an API, but it&amp;rsquo;s worth checking whether that&amp;rsquo;s the case. If it is,
it&amp;rsquo;s often surprisingly easy to use, as long as you only want to do a few simple
things. What I just described as an example can be implemented as a bash script
with just a few lines, using &lt;code&gt;curl&lt;/code&gt; to access the API and &lt;a href=&#34;https://stedolan.github.io/jq/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;jq&lt;/code&gt;&lt;/a&gt; to parse JSON.&lt;/p&gt;
&lt;h2 id=&#34;final-notes&#34;&gt;Final notes&lt;/h2&gt;
&lt;p&gt;In case you&amp;rsquo;re interested, &lt;a href=&#34;https://github.com/ejnnr/dotfiles/blob/main/bin/welcome%5Fscreen.sh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; is the script that displays the welcome screen and &lt;a href=&#34;https://github.com/ejnnr/dotfiles/blob/main/bin/complice.sh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; is the one for the Complice/Beeminder API.
That repository also contains the other things I mentioned in this post.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m interested to apply this idea of automating parts of my routines
even more. If you have ideas in that direction, I would appreaciate &lt;a href=&#34;mailto:erik@ejenner.com&#34;&gt;a message&lt;/a&gt;.
Also feel free to shoot me an email if you are trying to set up any of the things
I&amp;rsquo;ve described here and want more details on how to do that.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.kisscc0.com/photo/public-domain-creative-commons-license-nature-1a92bt/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wallpaper source&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Collection of quick computer tips</title>
      <link>https://ejenner.com/post/computer-tips/</link>
      <pubDate>Wed, 31 Mar 2021 14:49:00 +0200</pubDate>
      <guid>https://ejenner.com/post/computer-tips/</guid>
      <description>&lt;p&gt;This is a list of tips for improving your experience working
with your computer. I focus on things that are quick to implement
(say, 5 minutes to half an hour). Spending 5 minutes on something becomes
worthwhile as soon as it saves you &lt;a href=&#34;https://xkcd.com/1205/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;5 seconds per month over 5 years&lt;/a&gt;,
and I think all the tips here easily clear that bar.
I&amp;rsquo;m not mentioning some things that are extremely
valuable but take more time to do, stuff like &amp;ldquo;learn vim keybindings&amp;rdquo;.
That&amp;rsquo;s not because those aren&amp;rsquo;t important &amp;ndash; they might even be more important
than these quick hacks. But they don&amp;rsquo;t fit well into this format because
I would need to give a lot more context: who they are useful for, why it&amp;rsquo;s
worth investing time in them etc.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve grouped these tips and tried to sort them by descending usefulness
inside each category, but that&amp;rsquo;s of course quite subjective.
As a final caveat, I don&amp;rsquo;t explain in detail how to set all of this up.
If you&amp;rsquo;ve played around with configuration files before, the pointers I give are hopefully
enough. If you haven&amp;rsquo;t, this might not be the easiest place to start.&lt;/p&gt;
&lt;h2 id=&#34;general&#34;&gt;General&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;Make use of your Caps Lock key&lt;/dt&gt;
&lt;dd&gt;The Caps Lock key takes up extremely
valuable keyboard real estate, even though most people never use it.
I suggest mapping it to Control for non-vim users. If you use vim keybindings,
you&amp;rsquo;ve probably already remapped it to Escape; in that case I would suggest
using it as an Escape key when pressed and as Control when held down while
pressing another key. How that works depends on your OS (I&amp;rsquo;m using &lt;a href=&#34;https://gitlab.com/interception/linux/plugins/caps2esc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;caps2esc&lt;/a&gt; on Archlinux).&lt;/dd&gt;
&lt;dt&gt;Fuzzy finder for opening files&lt;/dt&gt;
&lt;dd&gt;Opening files using a file browser or by first opening
an application and then using the &amp;ldquo;Open file&amp;rdquo; dialog is really slow. Instead, you can
use a launcher  that you can invoke with a keyboard
shortcut. You then type in part of the path or filename and once you confirm your selection,
the file is opened. On Linux, you can install for example &lt;a href=&#34;https://albertlauncher.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Alfred&lt;/a&gt; or &lt;a href=&#34;https://ulauncher.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ULauncher&lt;/a&gt; (which also have additional
functionality rather than just opening files). Or you can use &lt;a href=&#34;https://github.com/davatorium/rofi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rofi&lt;/a&gt;, which is extremely
flexible but will require a bit more setup.&lt;/dd&gt;
&lt;dt&gt;Adjust your typematic delay and rate&lt;/dt&gt;
&lt;dd&gt;If you hold a key down, this simulates
pressing that key a bunch of times at a high frequency. The typematic rate
is this frequency and the typematic delay is the time delay before this effect kicks
in. You can adjust these values to your liking, how that works depends on your OS/Desktop environment.
On Linux with X, you can use &lt;code&gt;xset r rate &amp;lt;delay in ms&amp;gt; &amp;lt;rate in Hz&amp;gt;&lt;/code&gt; (this is temporary, so put this
in a script that will be executed on startup).&lt;/dd&gt;
&lt;dt&gt;Redshift&lt;/dt&gt;
&lt;dd&gt;Use &lt;a href=&#34;http://jonls.dk/redshift/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;redshift&lt;/a&gt; or &lt;a href=&#34;https://justgetflux.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;f.lux&lt;/a&gt; to automatically adjust the color temperature of your screen according
to the time of day. This will gradually make your screen look warmer during the evening.&lt;/dd&gt;
&lt;dt&gt;Dotfiles&lt;/dt&gt;
&lt;dd&gt;Put your dotfiles in a git repository. &lt;a href=&#34;http://dotfiles.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;This page&lt;/a&gt; contains a few ideas as inspiration on
how to best set this up. Personally, I use &lt;a href=&#34;https://github.com/anishathalye/dotbot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dotbot&lt;/a&gt;, which means I can put all my configuration
files into one directory and they will be symlinked to the right places. You can also do something
similar for your &lt;code&gt;/etc&lt;/code&gt; files using &lt;a href=&#34;http://etckeeper.branchable.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;etckeeper&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;sshfs&lt;/dt&gt;
&lt;dd&gt;This lets you mount a remote directory inside your local file system,
after which you can edit, create, move and delete files there using whichever
tools you like to use for that on your local machine. It&amp;rsquo;s in the package repositories
of most Linux distributions and using it is as simple as
&lt;pre&gt;&lt;code class=&#34;language-nil&#34;&gt;            $ sshfs [user@]hostname:[directory] mountpoint
&lt;/code&gt;&lt;/pre&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;shell&#34;&gt;Shell&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;Use vim keybindings everywhere&lt;/dt&gt;
&lt;dd&gt;There are extensions for most browsers
that let you browse web pages with vim keybindings.
You can also use them in &lt;code&gt;zsh&lt;/code&gt; (add &lt;code&gt;bindkey -v&lt;/code&gt; to you &lt;code&gt;~/.zshrc&lt;/code&gt; or use &lt;a href=&#34;https://github.com/jeffreytse/zsh-vi-mode&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this extension&lt;/a&gt;
for some improved features). In &lt;code&gt;fish&lt;/code&gt;, you can use &lt;code&gt;fish_vi_key_bindings&lt;/code&gt; inside your config,
and for &lt;code&gt;bash&lt;/code&gt; it&amp;rsquo;s &lt;code&gt;set -o vi&lt;/code&gt;. You can even enable them for all readline programs,
such as the Python REPL, by adding
&lt;pre&gt;&lt;code class=&#34;language-nil&#34;&gt;          set editing-mode vi
          set keymap vi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to your &lt;code&gt;~/.inputrc&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Ctrl-R history search&lt;/dt&gt;
&lt;dd&gt;Pressing Ctrl-R inside your terminal will let you search
through your history of commands and paste the one you select to your prompt,
after which you can edit it.&lt;/dd&gt;
&lt;dt&gt;Aliases&lt;/dt&gt;
&lt;dd&gt;Pay attention to commands you&amp;rsquo;re using frequently and create aliases for them.
Using &lt;a href=&#34;https://linux.byexamples.com/archives/332/what-is-your-10-common-linux-commands/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this command&lt;/a&gt;, you can also show your most common commands, maybe that gives some
ideas (though what we really care about is closer to &amp;ldquo;most common long prefixes of commands&amp;rdquo;;
might be worth it to write a script for that instead).&lt;/dd&gt;
&lt;dt&gt;fzf&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;https://github.com/junegunn/fzf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fzf&lt;/a&gt; is a general purpose fuzzy finder and you can use it for all kinds of
things. But more importantly, for this list, it comes with three pre-defined
shell-keybindings: Ctrl-R is replaced with an improved history search, and Alt-C lets
you fuzzy search the directories on your machine and will &lt;code&gt;cd&lt;/code&gt; to the chosen one.
Finally, Ctrl-T lets you search files inside the current directory (recursively)
and pastes the selected path into the prompt, which is much faster for typing long
paths than the usual TAB completion.&lt;/dd&gt;
&lt;dt&gt;Autosuggestions&lt;/dt&gt;
&lt;dd&gt;Autosuggestions in your shell mean
that the shell always tries to guess which command you&amp;rsquo;re entering, typically
based on the TAB completions as well as your history. It shows this guess and
you can hit a keybinding to complete it. Make sure to remap this
to something sensible (for example, zsh uses the right arrow key, which is way too far
away, I use Ctrl-Space insted). &lt;code&gt;fish&lt;/code&gt; has these built in, and there is an &lt;a href=&#34;https://github.com/zsh-users/zsh-autosuggestions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;extension&lt;/a&gt;
for &lt;code&gt;zsh&lt;/code&gt;. As far as I know, &lt;code&gt;bash&lt;/code&gt; doesn&amp;rsquo;t have autosuggestions at the moment.&lt;/dd&gt;
&lt;dt&gt;autojump&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;https://github.com/wting/autojump&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;autojump&lt;/a&gt; watches the directories you visit in your shell and maintains
a database of which ones you use the most. Then you can type &lt;code&gt;$ j &amp;lt;part of directory path&amp;gt;&lt;/code&gt;
and &lt;code&gt;autojump&lt;/code&gt; will try to guess which directory you want to go to and &lt;code&gt;cd&lt;/code&gt; there.
A couple of letters from the directory name are usually enough for that.
This is a good alternative to &lt;code&gt;fzf&lt;/code&gt;&amp;rsquo;s Alt-C search.&lt;/dd&gt;
&lt;dt&gt;Syntax highlighting&lt;/dt&gt;
&lt;dd&gt;This just means different parts of your command are colored
differently, much more pleasant to work with. Again, &lt;code&gt;fish&lt;/code&gt; has this built in, for
&lt;code&gt;zsh&lt;/code&gt; you can use another &lt;a href=&#34;https://github.com/zsh-users/zsh-syntax-highlighting&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;extension&lt;/a&gt;, and I don&amp;rsquo;t think there&amp;rsquo;s an easy way to do this
in bash.&lt;/dd&gt;
&lt;dt&gt;!!&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;!!&lt;/code&gt; expands to the previous command. So for example, &lt;code&gt;$ sudo !!&lt;/code&gt; reruns your previous
command as a super user.&lt;/dd&gt;
&lt;dt&gt;Output coloring&lt;/dt&gt;
&lt;dd&gt;Many shell commands can color their output but have this disabled by default. In particular:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias ls=&#39;ls --color=auto&#39;&lt;/code&gt; to always have colored &lt;code&gt;ls&lt;/code&gt; output&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sharkdp/bat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bat&lt;/a&gt; is a &lt;code&gt;cat&lt;/code&gt; replacement with syntax highlighting among other things.
It can also be used to &lt;a href=&#34;https://github.com/sharkdp/bat#man&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;color man pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://wiki.archlinux.org/index.php/Color%5Foutput%5Fin%5Fconsole&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ArchWiki&lt;/a&gt; contains many more cases (most of them not specific to Arch)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Color theme&lt;/dt&gt;
&lt;dd&gt;Most terminal emulators allow choosing your own color theme,
and there are configurations online for most pairs of terminal emulator and
popular color theme. So you can for example use the same theme you use inside
your editor for your terminal as well.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;zathura&#34;&gt;Zathura&lt;/h2&gt;
&lt;p&gt;Zathura is a lightweight PDF viewer with vim keybindings. I&amp;rsquo;m a big fan; in case
you are as well, here are two tips to make it even better:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When you&amp;rsquo;re on e.g. page 10 of a PDF but the page number in the footer is 1
(because of title pages etc.), type &lt;code&gt;:offset 9&lt;/code&gt; to tell Zathura about this mismatch.
Whenever you type &lt;code&gt;&amp;lt;page number&amp;gt; G&lt;/code&gt; later, Zathura will subtract this offset and
you will be on the page with &lt;code&gt;&amp;lt;page number&amp;gt;&lt;/code&gt; in the footer. Extremely useful if
the PDF has no hyperlinked table of contents. Zathura remembers this setting for each file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recoloring allows you to give PDFs a custom foreground and background color. For example,
you could display PDFs as light text on a dark background. Or use the following in your &lt;code&gt;zathurarc&lt;/code&gt;,
which displays PDFs in a Solarized light color scheme:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34;&gt;    set recolor
    set recolor-darkcolor &amp;quot;#586e75&amp;quot;
    set recolor-lightcolor &amp;quot;#fdf6e3&amp;quot;
    set recolor-keephue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last line means that the colors of images should be preserved (though they&amp;rsquo;ll be
less vibrant). This works for &lt;em&gt;all&lt;/em&gt; pdfs, even scanned images! Ctrl-R will toggle recolorization
on and off, in case you want to switch back to the original.
For the ideal visual experience, you can also set the color of all the GUI elements,
see &lt;a href=&#34;https://github.com/lennonwoo/zathura-solarized&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/lennonwoo/zathura-solarized&lt;/a&gt; for a Solarized version.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacs as an amazing LaTeX editor</title>
      <link>https://ejenner.com/post/latex-emacs/</link>
      <pubDate>Wed, 17 Mar 2021 14:14:00 +0100</pubDate>
      <guid>https://ejenner.com/post/latex-emacs/</guid>
      <description>&lt;p&gt;The purpose of this post is to point you towards some great features
and packages if you&amp;rsquo;re already using Emacs to edit LaTeX, and to
make you jealous if you&amp;rsquo;re using some other editor&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;This isn&amp;rsquo;t a tutorial for Emacs or even a tutorial on how to write LaTeX inside
Emacs. Rather, it&amp;rsquo;s supposed to give an idea of what&amp;rsquo;s possible, either
as inspiration or to convince you to give Emacs a try. One problem is
that setting all of this up can be a huge time sink, so you might want
to use a framework such as &lt;a href=&#34;https://github.com/hlissner/doom-emacs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Doom&lt;/a&gt;, where you just need to enable the LaTeX
module and get almost everything I describe here.&lt;/p&gt;
&lt;h2 id=&#34;the-basics&#34;&gt;The basics&lt;/h2&gt;
&lt;p&gt;Of course you get all the basics you would expect from a LaTeX editor.
Synctex is supported (meaning you can jump from a certain line in the
LaTeX code to the corresponding place inside your PDF viewer and the other
way around), you can compile files from inside emacs, you can jump to
compilation errors if there are any, there is auto-completion and so on.&lt;/p&gt;
&lt;h2 id=&#34;visuals&#34;&gt;Visuals&lt;/h2&gt;
&lt;p&gt;LaTeX can produce beautiful documents, but the source code isn&amp;rsquo;t very
readable when writing mathematical expressions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;  \alpha \mapsto \int_{\R}e^{-\alpha x^2}\,dx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Emacs and AUCTeX (which is the de-facto standard package for using LaTeX inside
Emacs) have several features that improve this situation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;preview-latex&lt;/code&gt; replaces equations (and other parts of the LaTeX document)
with images by compiling them. This means they look exactly the same inside
the editor as they will in the compiled document. When the cursor is on
an equation, this image preview is automatically replaced by the underlying text so you can
still easily edit equations. However, this method of course has a noticeable
delay because it requires a call to the LaTeX compiler.&lt;/li&gt;
&lt;li&gt;LaTeX superscripts and subscripts are displayed as super-/subscripts inside the editor.
This is a purely visual feature, editing them doesn&amp;rsquo;t require &amp;ldquo;entering&amp;rdquo; or &amp;ldquo;exiting&amp;rdquo;
the subscript or anything like that.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prettify-symbols-mode&lt;/code&gt; allows you to replace any string with any unicode symbol.
AUCTeX comes with a fairly comprehensive predefined list, which replaces LaTeX commands
such as greek letters, arrows and others with symbolic representations. But you
can also add your own. For example, the example above uses &lt;code&gt;\R&lt;/code&gt;, which my custom style
file defines as &lt;code&gt;\mathbb{R}&lt;/code&gt;, and it&amp;rsquo;s possible to add replacement rules for such custom
commands (as long as there is a fitting Unicode symbol). This makes the line above
look like this in my editor:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/latex-emacs/_20210317_140709screenshot_hu90a561829b557b8c94f2740a8e594e56_19495_1ac1a653e1e944496505b731d26697b4.png 400w,
               /post/latex-emacs/_20210317_140709screenshot_hu90a561829b557b8c94f2740a8e594e56_19495_7bb49c13616a0ab182dae2332666fec5.png 760w,
               /post/latex-emacs/_20210317_140709screenshot_hu90a561829b557b8c94f2740a8e594e56_19495_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://ejenner.com/post/latex-emacs/_20210317_140709screenshot_hu90a561829b557b8c94f2740a8e594e56_19495_1ac1a653e1e944496505b731d26697b4.png&#34;
               width=&#34;457&#34;
               height=&#34;162&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

When the cursor moves over one of those Unicode symbols, it is expanded to the underlying
text. And the nice thing about this is that it&amp;rsquo;s essentially instantaneous because nothing
needs to be compiled.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Folding&lt;/em&gt; is something similar but more general (though unlike &lt;code&gt;prettify-symbols-mode&lt;/code&gt; it&amp;rsquo;s specific to LaTeX).
It doesn&amp;rsquo;t just allow replacing fixed strings but also more complicated
expressions. By default, this is used for example to display &lt;code&gt;\label{some_label}&lt;/code&gt; as &lt;code&gt;[l]&lt;/code&gt;
(which as always expands when the cursor moves over it). The reasoning here is that
some elements such as labels are just distractions when reading LaTeX source code.
But you can also use this to further improve how math is displayed, see
&lt;a href=&#34;https://tecosaur.github.io/emacs-config/config.html#editor-visuals&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this config&lt;/a&gt; for some ideas (and in general for more ideas on how to
beautify LaTeX inside Emacs).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;editing&#34;&gt;Editing&lt;/h2&gt;
&lt;p&gt;AUCTeX has a couple of nice features that make typing LaTeX a bit easier.
For example, you can let it automatically insert braces &lt;code&gt;{}&lt;/code&gt; when typing &lt;code&gt;_&lt;/code&gt; or &lt;code&gt;^&lt;/code&gt;
inside a math environment, you can let it insert &lt;code&gt;\(\)&lt;/code&gt; when typing a dollar sign,
and even &lt;code&gt;\enquote{}&lt;/code&gt; when typing &lt;code&gt;&amp;quot;&lt;/code&gt; &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;But things get even better with the &lt;a href=&#34;https://github.com/iyefrat/evil-tex&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;evil-tex&lt;/code&gt;&lt;/a&gt; package. As the name suggests,
this is only relevant if you&amp;rsquo;re using &lt;code&gt;evil-mode&lt;/code&gt; (vim keybindings inside emacs),
but if so, it&amp;rsquo;s definitely worth trying. Just a few examples of what this allows
you to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Say you&amp;rsquo;ve typed&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;    \(ax^{2} + b\)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and suddenly realize that this is supposed to go into an exponent. With your cursor
anywhere on this math environment, type &lt;code&gt;ysim^&lt;/code&gt; (&amp;ldquo;surround everything inside the math
environment as an exponent&amp;rdquo;) and you&amp;rsquo;ll get&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;    \(^{ax^{2} + b}\)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with the cursor at the &lt;code&gt;^&lt;/code&gt;. Now you just need to enter the base.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your equations is now&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;    \(e^{ax^{2} + b}\)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and you decide that this merits its own displayed rather than
inline equation. So you type &lt;code&gt;csmee&lt;/code&gt; (&amp;ldquo;change the surrounding math environment
to &lt;code&gt;equation&lt;/code&gt;&amp;quot;) and get&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;    \begin{equation}
    e^{ax^{2} + b}
    \end{equation}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After a bit more editing, you have (for some reason)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;    \begin{equation}
    \beta(e^{ax^{2} + b} + \frac{1}{x})
    \end{equation}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course this looks ugly in the compiled document, you need to use &lt;code&gt;\left(&lt;/code&gt; and &lt;code&gt;\right)&lt;/code&gt;.
With &lt;code&gt;evil-tex&lt;/code&gt;, you can just type &lt;code&gt;mtd&lt;/code&gt; (&amp;ldquo;toggle delimiter&amp;rdquo;) with the cursor anywhere
inside the parantheses, and it will add &lt;code&gt;\left&lt;/code&gt; and &lt;code&gt;\right&lt;/code&gt; for you. Type &lt;code&gt;mtd&lt;/code&gt; again to
go back to just the parantheses.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;emacs-calc-s-embedded-mode&#34;&gt;Emacs calc&amp;rsquo;s embedded mode&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;calc&lt;/code&gt; is the built-in calculator for Emacs; though saying &amp;ldquo;calculator&amp;rdquo;
is a bit misleading because it can do symbolic differentiation, unit conversion,
linear algebra and more. If your press &lt;code&gt;C-x * e&lt;/code&gt; with your cursor on any LaTeX equation,
you will start &lt;code&gt;calc&lt;/code&gt; in &amp;ldquo;embedded mode&amp;rdquo;. This means that &lt;code&gt;calc&lt;/code&gt; will parse the LaTeX
code and then let you do any calculations you want involving the expression.
The result will automatically be converted back to LaTeX and written into the
buffer.&lt;/p&gt;
&lt;p&gt;For example, say you have&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\[\sin\left( x^2 + \sqrt{x} \right)\]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and want to know the derivative. You can enter embedded mode and type &lt;code&gt;ad&lt;/code&gt; to differentiate,
then type &lt;code&gt;x&lt;/code&gt; when prompted for the variable with respect to which to differentiate.
And just like that, you will have&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\[\left( 2 x + \frac{0.5}{\sqrt{x}} \right) \cos\left( x^2 + \sqrt{x} \right)\]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;inside your buffer. &lt;code&gt;calc&lt;/code&gt; can even parse and output things like &lt;code&gt;\begin{pmatrix}...\end{pmatrix}&lt;/code&gt;,
so you can multiply matrices as well.&lt;/p&gt;
&lt;h2 id=&#34;and-more&#34;&gt;And more&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve only covered some of my personal favorite features when it comes to
writing LaTeX inside Emacs, there&amp;rsquo;s much more. For example, &lt;code&gt;LaTeX-math-mode&lt;/code&gt; allows
you to very quickly enter mathematical symbols and RefTeX as well as other packages
make handling references, labels and citations very efficient.
And of course there are a gazillion other packages that can make writing LaTeX
easier &amp;ndash; this is Emacs after all.&lt;/p&gt;
&lt;p&gt;The downside is of course that there is a pretty steep learning curve.
But for people who need to write LaTeX documents all the time, I&amp;rsquo;d argue
it&amp;rsquo;s worth it.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Though mostly the first part &amp;ndash; I haven&amp;rsquo;t actually tried many others and they may be just as amazing.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Using &lt;code&gt;TeX-electric-sub-and-superscript&lt;/code&gt;, &lt;code&gt;TeX-electric-math&lt;/code&gt;, and &lt;code&gt;LaTeX-csquotes-open-quote&lt;/code&gt; / &lt;code&gt;LaTeX-csquotes-close-quote&lt;/code&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>
